{"version":3,"sources":["api/todolist-api.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","utils/enumActionTypes.ts","utils/errorUtils.ts","features/login/authReducer.ts","app/appReducer.ts","features/todolist/TasksReducer.tsx","features/todolist/task/Task.tsx","features/todolist/TodoList.tsx","features/todolist/TodolistsReducer.tsx","features/todolists/TodolistsList.tsx","components/errorSnackBar/ErrorSnackBur.tsx","features/login/Login.tsx","app/App.tsx","serviceWorker.ts","app/Store.ts","index.tsx","images/3.jpg"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","error","setError","addItemTitle","trim","TextField","variant","id","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","Button","size","onClick","style","height","EditableSpan","props","editMode","seteditMode","defaultValue","autoFocus","onBlur","onDoubleClick","ACTIONS_TYPE","instance","Axios","create","baseURL","withCredentials","headers","TodolistAPI","get","post","todolistId","delete","put","TaskAPI","taskId","model","AuthAPI","data","handleServerAppError","dispatch","messages","length","setErrorAC","setStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","type","SET_ISLOGGEDIN","status","isInitialized","SET_STATUS","SET_ERROR","removeTaskAC","REMOVE_TASK","updateTaskAC","bllModel","UPDATE_TASK","setTasksAC","tasks","SET_TASKS","updateTaskTC","getState","a","allTasksFromState","tasksForCurrentTodolist","task","find","t","apiModel","description","priority","startDate","deadline","response","resultCode","Task","onClickHandler","useCallback","removeTask","onChangeTaskTitleHandler","newTitle","changeTaskTitle","onChangeStatusHandler","newStatusValue","checked","changeStatus","Completed","New","Checkbox","defaultChecked","color","inputProps","IconButton","aria-label","TodoList","demo","useDispatch","useEffect","todolist","items","tasksForTodoList","filter","addTask","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","changeTodolist","entityStatus","removeTodolist","map","removeTodolistAC","REMOVE_TODOLIST","changeTodolistTitleAC","CHANGE_TODOLIST_TITLE","changeTodolistEntityStatusAC","CHANGE_TODOLIST_ENTITY_STATUS","TodolistsList","todolists","useSelector","state","auth","SET_TODOLISTS","todolistID","thunk","item","ADD_TASK","addTaskTC","addTodolist","ADD_TODOLIST","addTodolistTC","taskID","TodolistID","action","CHANGE_TODOLIST_FILTER","Grid","container","padding","spacing","tl","Paper","elevation","backgroundImage","PaperBackground","backgroundSize","to","Alert","ErrorSnackBar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","JSON","stringify","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","name","handleBlur","handleChange","touched","FormControlLabel","control","App","SET_INITIALIZED","className","AppBar","position","backgroundColor","Toolbar","edge","Typography","marginTop","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.96feba2c.chunk.js","sourcesContent":["import Axios from \"axios\"\r\n\r\n\r\nexport enum TaskStatuses {\r\nNew = 0,\r\nInProgress = 1,\r\nCompleted = 2,\r\nDraft = 3\r\n}\r\nexport enum TaskPriorities {\r\nLow = 0,\r\nMiddle = 1,\r\nHi = 2,\r\nUrgently = 3,\r\nLater = 4\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n }\r\n export type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n } \r\n\r\n export type TaskType= {\r\ndescription: string\r\ntitle: string\r\nstatus: TaskStatuses\r\npriority: TaskPriorities\r\nstartDate: string\r\ndeadline: string\r\nid: string\r\ntodoListId: string\r\norder: number\r\naddedDate: string\r\n }\r\n type GetTaskResponce = {\r\n     error: string\r\n     totalCount: number\r\n     items:Array<TaskType>\r\n }\r\n\r\nconst instance = Axios.create ({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n     withCredentials: true,\r\n     headers: { \"API-KEY\": \"e9273c8b-70eb-4960-b897-692d970ce8cd\"}\r\n})\r\n\r\nexport const TodolistAPI = {\r\n    getTodolists  () {\r\n        return instance.get <Array<TodolistType>>(`todo-lists/`)\r\n    },\r\n    createTodolist (title: string) {\r\n        return instance.post <ResponseType<{item: TodolistType}> >(`todo-lists/` , {title})\r\n    },\r\n    deleteTodolist (todolistId: string) {\r\n        return instance.delete <ResponseType<{}>>(`todo-lists/`+ todolistId)\r\n    },\r\n    updateTodolist (todolistId: string, title: string) {\r\n        return instance.put <ResponseType< {}>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n}\r\n\r\nexport const TaskAPI = {\r\n    getTasks  (todolistId: string) {\r\n        return instance.get <GetTaskResponce>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask (todolistId: string, title: string) {\r\n        return instance.post <ResponseType<{item: TaskType}> >(`todo-lists/${todolistId}/tasks` , {title})\r\n    },\r\n    deleteTask (todolistId: string, taskId: string) {\r\n        return instance.delete <ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const AuthAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n    },\r\n    logout () {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },  \r\n    me () {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }  \r\n }\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\n export type AddItemPropsType = {    \r\n    addItem:(title:string)=>void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({addItem, disabled = false}:AddItemPropsType) => {\r\n    console.log(\"AddItem\")\r\n    let [title, setTitle] = useState(\" \")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemTitle = () => { if (title.trim() !== \"\"){ addItem(title); setTitle(\" \") }\r\n                                 else { setError(true) }}\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {if(error!==false) {setError(false)};\r\n                                                                       if (e.key === \"Enter\") {addItemTitle()}};\r\n   \r\n    return (\r\n        <div>\r\n            <TextField error={error} variant=\"outlined\" id=\"outlined-error-helper-text\" \r\n             label={error ? \"Error\" : \"Input text\"} helperText={error ? \"Title is required!\" : \"\"}\r\n                value={title} onChange={onChangeHandler} onKeyPress={onKeyPressHandler} disabled={disabled}/>\r\n            <Button variant=\"contained\" size=\"small\" onClick={addItemTitle} style={{height:\"55px\"}} disabled={disabled}>ADD</Button>\r\n        </div>\r\n                \r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\n\r\n export type EditableSpanPropsType = {\r\n    value:string\r\n    onChange:(newTitle: string)=> void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo (({disabled= false, ...props}:EditableSpanPropsType) => {\r\n    let [editMode, seteditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activateEditMode = ()=>{seteditMode(true)\r\n                                  setTitle(props.value)}\r\n    const disactivateEditMode = ()=>{seteditMode(false)\r\n                                    props.onChange(title) }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    \r\n    return ( editMode ? <TextField  id=\"outlined-size-small\" defaultValue=\"Small\"  variant=\"outlined\" size=\"small\"\r\n                         onChange={onChangeHandler} autoFocus onBlur={disactivateEditMode} value={title} disabled={disabled}/>    \r\n                      : <span onDoubleClick={ activateEditMode }>{props.value}</span>                     \r\n    )\r\n})\r\n","export enum ACTIONS_TYPE {\r\n    REMOVE_TASK = \"todolist/tasks/REMOVE-TASK\",\r\n    ADD_TASK = \"todolist/tasks/ADD-TASK\",\r\n    UPDATE_TASK = \"todolist/tasks/UPDATE-TASK\",\r\n    SET_TASKS = \"todolist/tasks/SET-TASKS\",\r\n    ADD_TODOLIST = \"todolist/todolists/ADD-TODOLIST\",\r\n    REMOVE_TODOLIST = \"todolist/todolists/REMOVE-TODOLIST\",\r\n    SET_TODOLISTS = \"todolist/todolists/SET-TODOLISTS\",\r\n    CHANGE_TODOLIST_TITLE = \"todolist/todolists/CHANGE-TODOLIST-TITLE\",\r\n    CHANGE_TODOLIST_FILTER = \"todolist/todolists/CHANGE-TODOLIST-FILTER\",\r\n    CHANGE_TODOLIST_ENTITY_STATUS = \"todolist/todolists/CHANGE-TODOLIST-ENTITY-STATUS\",\r\n    SET_ISLOGGEDIN = \"todolist/login/SET-IS-LOGGED-IN\",\r\n    SET_STATUS = \"todolist/app/SET-STATUS\",\r\n    SET_ERROR = \"todolist/app/SET-ERROR\",\r\n    SET_INITIALIZED = \"todolist/app/SET-INITIALIZED\",\r\n  }","import {ResponseType} from \"../api/todolist-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport {setStatusAC, setErrorAC, SetErrorActionType, SetStatusActionType} from \"../app/appReducer\"\r\n\r\n export const handleServerAppError = <D> (data: ResponseType<D>, dispatch: Dispatch <SetStatusActionType | SetErrorActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch (setStatusAC(\"failed\"))\r\n}                \r\n  \r\n\r\n export const handleServerNetworkError = (error: any, dispatch: Dispatch <SetStatusActionType | SetErrorActionType>) => {\r\n    dispatch(setErrorAC(error.message ? error.message : \"Some error\"))\r\n    dispatch (setStatusAC(\"failed\"))\r\n }","import { Dispatch } from \"redux\"\r\nimport { SetErrorActionType, setStatusAC , SetStatusActionType } from \"../../app/appReducer\"\r\nimport {AuthAPI, LoginParamsType} from \"../../api/todolist-api\"\r\nimport { handleServerAppError,  handleServerNetworkError} from \"../../utils/errorUtils\"\r\nimport {ACTIONS_TYPE} from \"../../utils/enumActionTypes\"\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case ACTIONS_TYPE.SET_ISLOGGEDIN:\r\n           return {...state, isLoggedIn: action.value}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n   ({type: ACTIONS_TYPE.SET_ISLOGGEDIN, value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) =>\r\nasync (dispatch: Dispatch<ActionsType>) => {\r\n   try {\r\n      dispatch(setStatusAC('loading'))\r\n      const response = await AuthAPI.login(data)\r\n         \r\n            if (response.data.resultCode === 0) {\r\n               dispatch(setIsLoggedInAC(true))\r\n               dispatch(setStatusAC(\"succeeded\"))\r\n            } else {\r\n               handleServerAppError(response.data, dispatch)\r\n            }\r\n   } catch (error){\r\n         handleServerNetworkError(error, dispatch)\r\n      }\r\n}\r\n\r\nexport const logoutTC = () =>\r\nasync (dispatch: Dispatch<ActionsType>) => {\r\n   try {\r\n      dispatch(setStatusAC('loading'))\r\n      const response = await AuthAPI.logout()\r\n         \r\n              if (response.data.resultCode === 0) {\r\n                  dispatch(setIsLoggedInAC(false))\r\n                  dispatch(setStatusAC('succeeded'))\r\n              } else {\r\n                  handleServerAppError(response.data, dispatch)\r\n              }\r\n   } catch(error){\r\n           handleServerNetworkError(error, dispatch)\r\n       }\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetStatusActionType | SetErrorActionType\r\n\r\n   \r\n// export const logout = () =>\r\n//     async (dispatch: any) => {\r\n//         try {\r\n//             const response = await AuthAPI.logout()\r\n//             if (response.data.resultCode === 0) {\r\n//                 dispatch(setUserData(null, null, null, false))\r\n//             }\r\n//         } catch (error) {\r\n//             handleServerNetworkError(error, dispatch)\r\n//         }\r\n//     }","import {AuthAPI} from \"../api/todolist-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport {setIsLoggedInAC} from \"../features/login/authReducer\"\r\nimport {ACTIONS_TYPE} from \"../utils/enumActionTypes\"\r\nimport { handleServerAppError,  handleServerNetworkError} from \"../utils/errorUtils\"\r\n\r\nconst initialState: InitialStateType = {\r\n   status: 'loading',\r\n   error: null,\r\n   isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_STATUS:\r\n            return { ...state, status: action.status }\r\n        case ACTIONS_TYPE.SET_ERROR:\r\n            return { ...state, error: action.error }\r\n        case ACTIONS_TYPE.SET_INITIALIZED:\r\n            return { ...state, isInitialized: action.isInitialized }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\nexport const setStatusAC = (status: RequestStatusType) => ({ type: ACTIONS_TYPE.SET_STATUS, status } as const)\r\nexport const setErrorAC = (error: string | null) => ({ type: ACTIONS_TYPE.SET_ERROR, error } as const)\r\nexport const setInitializedAC = (isInitialized: boolean) => ({ type: ACTIONS_TYPE.SET_INITIALIZED, isInitialized } as const)\r\n\r\nexport const initializeAppTC = () =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await AuthAPI.me()   \r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n        }\r\n        dispatch(setInitializedAC(true))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n   \r\n   \r\n}\r\n\r\n//types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n   // происходит ли сейчас взаимодействие с сервером\r\n   status: RequestStatusType\r\n   error: string | null\r\n   isInitialized: boolean\r\n}\r\nexport type SetStatusActionType = ReturnType<typeof setStatusAC> \r\nexport type SetErrorActionType = ReturnType<typeof setErrorAC>\r\n\r\ntype ActionsType = ReturnType<typeof setInitializedAC> | SetStatusActionType | SetErrorActionType\r\n\r\n\r\n ","import { Dispatch } from \"redux\"\r\nimport { AppRootStateType } from \"../../app/Store\"\r\nimport { TaskType, TaskAPI, UpdateTaskModelType } from \"../../api/todolist-api\"\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from \"./TodolistsReducer\"\r\nimport {setStatusAC, setErrorAC, SetErrorActionType, SetStatusActionType} from \"../../app/appReducer\"\r\nimport { handleServerAppError,  handleServerNetworkError} from \"../../utils/errorUtils\"\r\nimport {ACTIONS_TYPE} from \"../../utils/enumActionTypes\"\r\n\r\nlet initialState: TaskobjType = {}\r\n\r\nexport let tasksReducer = (state: TaskobjType = initialState, action: ActionType): TaskobjType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.REMOVE_TASK: \r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}        \r\n        case ACTIONS_TYPE.ADD_TASK: \r\n            return { ...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}        \r\n        case ACTIONS_TYPE.UPDATE_TASK: \r\n            return { \r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                .map(  task => task.id === action.taskId ? { ...task, ...action.bllModel } : task)\r\n            }       \r\n        case ACTIONS_TYPE.ADD_TODOLIST:             \r\n            return {...state, [action.todolist.id]:[]}        \r\n        case ACTIONS_TYPE.REMOVE_TODOLIST: {\r\n            let stateCopy = { ...state }\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        case ACTIONS_TYPE.SET_TODOLISTS: {\r\n            let stateCopy = { ...state }\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case ACTIONS_TYPE.SET_TASKS: \r\n            return {...state, [action.todolistId]: action.tasks}        \r\n        default: return state;\r\n    }\r\n}\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n ({ type: ACTIONS_TYPE.REMOVE_TASK, taskId, todolistId } as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n ({ type: ACTIONS_TYPE.ADD_TASK, task } as const)\r\nexport const updateTaskAC = (taskId: string, bllModel: UpdateBLLTaskModelType, todolistId: string) => \r\n    ({ type: ACTIONS_TYPE.UPDATE_TASK, taskId, bllModel, todolistId } as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => \r\n    ({ type: ACTIONS_TYPE.SET_TASKS, tasks, todolistId } as const)\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTS = (todolistId: string) =>\r\nasync (dispatch: ThunkDispatch) => {\r\n    try {\r\n        dispatch (setStatusAC(\"loading\"))\r\n        const response = await TaskAPI.getTasks(todolistId)            \r\n                dispatch(setTasksAC(response.data.items, todolistId))\r\n                dispatch (setStatusAC(\"succeeded\")) \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n                \r\n    }\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\nasync (dispatch: ThunkDispatch) => {\r\n    try {\r\n        const response = await TaskAPI.deleteTask(todolistId, taskId)           \r\n        dispatch(removeTaskAC(taskId, todolistId)) \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }              \r\n    }\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    async (dispatch: ThunkDispatch) => {\r\n        try {\r\n            dispatch(setStatusAC(\"loading\"))\r\n            const response = await TaskAPI.createTask(todolistId, title)\r\n\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(response.data.data.item))\r\n                dispatch(setStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\nexport const updateTaskTC = (taskId: string, bllModel: UpdateBLLTaskModelType, todolistId: string) =>\r\nasync (dispatch: ThunkDispatch , getState: () => AppRootStateType) => {\r\n        try {\r\n            const allTasksFromState = getState().tasks;\r\n            const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n            const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n            if (task) {\r\n                const apiModel: UpdateTaskModelType = {\r\n                    title: task.title,\r\n                    description: task.description,\r\n                    status: task.status,\r\n                    priority: task.priority,\r\n                    startDate: task.startDate,\r\n                    deadline: task.deadline,\r\n                    ...bllModel\r\n                }\r\n                const response = await TaskAPI.updateTask(todolistId, taskId, apiModel)\r\n\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, bllModel, todolistId))\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\n\r\n//types\r\ntype ActionType = | ReturnType<typeof removeTaskAC>\r\n                  | ReturnType<typeof addTaskAC>\r\n                  | ReturnType<typeof updateTaskAC>\r\n                  | AddTodolistActionType\r\n                  | RemoveTodolistActionType\r\n                  | SetTodolistsActionType\r\n                  | ReturnType<typeof setTasksAC>\r\nexport type UpdateBLLTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TaskobjType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionType | SetStatusActionType | SetErrorActionType >","import React, {ChangeEvent, useCallback} from \"react\"\r\nimport { EditableSpan } from \"../../../components/editableSpan/EditableSpan\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport Checkbox from \"@material-ui/core/Checkbox\"\r\nimport {TaskType, TaskStatuses} from \"../../../api/todolist-api\"\r\n\r\nexport const Task = React.memo ((props:TaskPropsType) => { \r\n    const onClickHandler = useCallback (() => { props.removeTask(props.task.id, props.todolistId) }, [props.removeTask,props.task.id, props.todolistId ])\r\n    const onChangeTaskTitleHandler = useCallback ((newTitle: string) => { props.changeTaskTitle(props.task.id, newTitle, props.todolistId) }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n   \r\n    const onChangeStatusHandler = useCallback ((e: ChangeEvent<HTMLInputElement>) => { \r\n        let newStatusValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId) }, [props.changeStatus, props.todolistId, props.task.id ]);\r\n    return <div key={props.task.id}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onChangeStatusHandler}\r\n            defaultChecked\r\n            color=\"default\"\r\n            inputProps={{ 'aria-label': 'checkbox with default color' }} />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onChangeTaskTitleHandler} />\r\n        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n            <DeleteIcon />\r\n        </IconButton></div>\r\n})\r\n\r\n//types\r\nexport type TaskPropsType = {\r\n    removeTask:(taskId:string, todolistID:string)=>void\r\n    changeStatus:(taskID:string, status:TaskStatuses, todolistID:string)=> void\r\n    changeTaskTitle:(taskID:string, newTitle:string, todolistID:string)=> void\r\n    task: TaskType \r\n    todolistId: string\r\n}","import React, {useCallback, useEffect} from \"react\"\r\nimport { AddItemForm } from \"../../components/addItemForm/AddItemForm\"\r\nimport { EditableSpan } from \"../../components/editableSpan/EditableSpan\"\r\nimport { FilterValuesType, TodolistBLLType } from \"./TodolistsReducer\"\r\nimport { fetchTasksTS } from \"./TasksReducer\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport {Task} from \"./task/Task\"\r\nimport {TaskType, TaskStatuses} from \"../../api/todolist-api\"\r\nimport {useDispatch} from \"react-redux\"\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistBLLType\r\n    // id:string\r\n    // title:string\r\n    tasks:Array<TaskType>\r\n    removeTask:(taskId:string, todolistID:string)=>void\r\n    changeFilter:(value: FilterValuesType, todolistID:string)=>void\r\n    addTask:(title:string, todolistID:string)=>void\r\n    changeStatus:(taskID:string, status:TaskStatuses, todolistID:string)=> void\r\n    changeTaskTitle:(taskID:string, newTitle:string, todolistID:string)=> void\r\n    // filter:FilterValuesType\r\n    removeTodolist: (todolistID:string)=> void\r\n    changeTodolist: (todolistID:string, newTitle: string)=> void\r\n    demo?:boolean\r\n}\r\n\r\nexport const TodoList = React.memo (({demo= false,...props}:TodoListPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo){\r\n            return\r\n        }\r\n        dispatch(fetchTasksTS(props.todolist.id))\r\n    }, [])  \r\n    \r\n    let tasksForTodoList = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n    const addTask = useCallback ((title:string) => {props.addTask(title, props.todolist.id)}, [props.addTask, props.todolist.id])\r\n    const onClickAllFilter = useCallback (() =>{props.changeFilter(\"all\", props.todolist.id)}, [props.changeFilter, props.todolist.id]);\r\n    const onClickActiveFilter = useCallback (() =>{props.changeFilter(\"active\", props.todolist.id)}, [props.changeFilter, props.todolist.id]);\r\n    const onClickCompletedFilter = useCallback (() =>{props.changeFilter(\"completed\", props.todolist.id)}, [props.changeFilter, props.todolist.id])\r\n    const removeTodolist = ()=>{props.removeTodolist(props.todolist.id)}\r\n    const changeTodolist =useCallback ((newTitle: string) => {props.changeTodolist(props.todolist.id, newTitle)},[props.changeTodolist, props.todolist.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.todolist.title} onChange={changeTodolist} disabled = {props.todolist.entityStatus=== \"loading\"}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodolist} disabled ={props.todolist.entityStatus===\"loading\"}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </h3>\r\n           \r\n            <AddItemForm addItem={addTask} disabled = {props.todolist.entityStatus=== \"loading\"}/>\r\n\r\n            <div>\r\n                {tasksForTodoList.map(task => <Task  removeTask = { props.removeTask}\r\n                                                changeStatus = {props.changeStatus}\r\n                                                changeTaskTitle = {props.changeTaskTitle}\r\n                                                task = {task}\r\n                                                todolistId = {props.todolist.id}\r\n                                                key = {task.id} />                  \r\n                )}\r\n            </div>\r\n            <div>\r\n                <Button  variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"} onClick={onClickAllFilter}>All</Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"} onClick={onClickActiveFilter}>Active</Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"} onClick={onClickCompletedFilter}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {Dispatch} from \"redux\"\r\nimport { TodolistAPI, TodolistType } from \"../../api/todolist-api\"\r\nimport {TaskType} from \"../../api/todolist-api\"\r\nimport {setStatusAC, SetStatusActionType, SetErrorActionType, RequestStatusType} from \"../../app/appReducer\"\r\nimport { handleServerAppError,  handleServerNetworkError} from \"../../utils/errorUtils\"\r\nimport {ACTIONS_TYPE} from \"../../utils/enumActionTypes\"\r\n\r\nlet initialState: Array<TodolistBLLType> = [] \r\n\r\nexport let todolistsReducer = (state: Array<TodolistBLLType> = initialState, action: ActionType): Array<TodolistBLLType> => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.REMOVE_TODOLIST: \r\n            return state.filter(tl => tl.id != action.todolistId)        \r\n        case ACTIONS_TYPE.ADD_TODOLIST:          \r\n            return [...state, { ...action.todolist, filter: \"all\" , entityStatus: \"idle\"}]        \r\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE: \r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)    \r\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER: \r\n            return state.map(tl => tl.id === action.todolistId ? { ...tl, filter: action.filter } : tl)\r\n        case ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return state.map(tl => tl.id === action.todolistId ? { ...tl, entityStatus: action.entityStatus } : tl)\r\n        case ACTIONS_TYPE.SET_TODOLISTS:\r\n            return action.todolists.map(tl => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))\r\n        default: return state;\r\n    }\r\n}\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) => ({ type: ACTIONS_TYPE.REMOVE_TODOLIST, todolistId} as const) \r\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: ACTIONS_TYPE.ADD_TODOLIST, todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => ({ type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE, todolistId, title} as const)\r\nexport const changeTodolistFilterAC = (filter:FilterValuesType, todolistId: string ) => ({ type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER, filter, todolistId} as const)\r\nexport const changeTodolistEntityStatusAC = (entityStatus:RequestStatusType, todolistId: string ) => ({ type: ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS, entityStatus, todolistId} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistBLLType> ) => ({ type: ACTIONS_TYPE.SET_TODOLISTS, todolists} as const)\r\n \r\n//thunks\r\nexport const fetchTodolistsTC = () =>\r\n    async (dispatch: ThunkDispatch) => {\r\n        try {\r\n            dispatch(setStatusAC(\"loading\"))\r\n            const response: any = await TodolistAPI.getTodolists()\r\n            dispatch(setTodolistsAC(response.data))\r\n            dispatch(setStatusAC(\"succeeded\"))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\nexport const removeTodolistTC = (todolistId: string) =>\r\nasync (dispatch: ThunkDispatch) => {\r\n    try {\r\n        dispatch (setStatusAC(\"loading\"))\r\n        dispatch (changeTodolistEntityStatusAC(\"loading\", todolistId))\r\n        const response: any = await TodolistAPI.deleteTodolist(todolistId)            \r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch (setStatusAC(\"succeeded\"))  \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }             \r\n    }\r\nexport const addTodolistTC = (title: string) =>\r\nasync (dispatch: ThunkDispatch) => {\r\n    try {\r\n        dispatch (setStatusAC(\"loading\"))\r\n        const response: any = await TodolistAPI.createTodolist(title)         \r\n                    dispatch(addTodolistAC (response.data.data.item))\r\n                    dispatch (setStatusAC(\"succeeded\"))  \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }            \r\n    }\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) =>\r\nasync (dispatch: ThunkDispatch) => {\r\n    try {\r\n        const response: any = await TodolistAPI.updateTodolist(todolistId, title)            \r\n        dispatch(changeTodolistTitleAC (todolistId, title))    \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }           \r\n    }\r\n//types\r\nexport type TaskobjType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\r\nexport type TodolistBLLType = TodolistType & {\r\n    filter:FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ActionType = | RemoveTodolistActionType \r\n                  | AddTodolistActionType\r\n                  | ReturnType <typeof changeTodolistTitleAC> \r\n                  | ReturnType <typeof changeTodolistFilterAC> \r\n                  | SetTodolistsActionType\r\n                  |  ChangeTodolistEntityStatusActionType\r\nexport type AddTodolistActionType = ReturnType <typeof addTodolistAC> \r\nexport type RemoveTodolistActionType = ReturnType <typeof removeTodolistAC> \r\nexport type SetTodolistsActionType = ReturnType <typeof setTodolistsAC>\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType <typeof changeTodolistEntityStatusAC>\r\ntype ThunkDispatch = Dispatch<ActionType | SetStatusActionType |SetErrorActionType  >","import React, {useCallback, useEffect} from \"react\"\r\nimport {TodoList} from \"../todolist/TodoList\"\r\nimport {AddItemForm} from \"../../components/addItemForm/AddItemForm\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport PaperBackground from \"../../images/3.jpg\"\r\nimport {changeTodolistTitleTC, addTodolistTC,removeTodolistTC, fetchTodolistsTC , TodolistBLLType, FilterValuesType, TaskobjType, changeTodolistFilterAC} from \"../../features/todolist/TodolistsReducer\"\r\nimport {updateTaskTC, addTaskTC, removeTaskTC} from \"../../features/todolist/TasksReducer\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {TaskStatuses} from \"../../api/todolist-api\"\r\nimport {AppRootStateType} from \"../../app/Store\"\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function TodolistsList({demo = false}: TodolistsListPropsType) {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistBLLType>>(state => state.todolists)\r\n    const tasks  = useSelector<AppRootStateType, TaskobjType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])  \r\n \r\n    const addTask = useCallback ((todolistID: string, title: string) => {\r\n        const thunk = addTaskTC(todolistID, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const addTodolist = useCallback ((title: string) => {\r\n        const thunk = addTodolistTC (title)\r\n        dispatch(thunk)    \r\n    }, [dispatch])\r\n    const changeStatus = useCallback ((taskID: string, status: TaskStatuses, todolistID: string) => {\r\n        const thunk = updateTaskTC (taskID, {status}, todolistID)\r\n        dispatch(thunk)         \r\n    }, [])\r\n    const changeTaskTitle = useCallback ((taskID: string, newTitle: string, todolistID: string) => {\r\n        const thunk = updateTaskTC (taskID, {title: newTitle}, todolistID)\r\n        dispatch(thunk) \r\n    }, [])\r\n    const removeTask = useCallback ((id: string, todolistID: string) =>{\r\n        const thunk = removeTaskTC (id, todolistID)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const changeFilter = useCallback ((value: FilterValuesType, TodolistID:string) => {\r\n        let action = changeTodolistFilterAC (value, TodolistID)\r\n        dispatch(action)\r\n        }, [dispatch])    \r\n    const removeTodolist = useCallback((todolistID: string) => { \r\n        const thunk = removeTodolistTC (todolistID)\r\n        dispatch(thunk) \r\n    }, [])\r\n    const changeTodolist = useCallback ((todolistID: string, newTitle: string) => {        \r\n        const thunk = changeTodolistTitleTC (todolistID, newTitle)\r\n        dispatch(thunk)     \r\n    }, [])\r\n      \r\n  \r\n if (!isLoggedIn) {\r\n    return <Redirect  to = {\"/login\"}/>\r\n }\r\n\r\n    return  <> \r\n<Grid container style={{padding: \"25px\"}}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    let tasksForTodoList = allTodolistTasks;\r\n\r\n                    return <Grid item >\r\n                        <Paper elevation={3} style={{padding: \"15px\",\r\n                                                     backgroundImage: `url(${PaperBackground})`,                                                   \r\n                                                     backgroundSize: \"100% auto\"}}\r\n                                                     key={tl.id}>\r\n                            <TodoList \r\n                            todolist={tl}\r\n                            // title={tl.title}\r\n                            //     id={tl.id}\r\n                                key={tl.id}\r\n                                tasks={tasksForTodoList}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                // filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolist={changeTodolist}\r\n                                demo={demo} />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n         </>\r\n}\r\n","import React from \"react\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/Store\"\r\nimport {setErrorAC} from \"../../app/appReducer\"\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n\r\nexport function ErrorSnackBar() {\r\n    const error  = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n   \r\n//   const [open, setOpen] = React.useState(false);\r\nlet isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    };\r\n\r\n  return (    \r\n      <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n    \r\n  );\r\n}","import React from \"react\"\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { loginTC } from \"./authReducer\"\r\nimport {AppRootStateType} from \"../../app/Store\"\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n }\r\n \r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n  \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values));\r\n            formik.resetForm()\r\n            const thunk = loginTC(values)\r\n            dispatch(thunk)\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect  to = {\"/\"}/>\r\n      }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                     </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            onBlur={formik.handleBlur}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color:\"red\"}}> {formik.errors.email} </div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            onBlur={formik.handleBlur}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color:\"red\"}}> {formik.errors.password} </div> : null}\r\n                        <FormControlLabel\r\n                            name=\"rememeberMe\"\r\n                            checked={formik.values.rememberMe}\r\n                            onChange={formik.handleChange}\r\n                            label={'Remember me'}\r\n                            control={<Checkbox />}\r\n                        />\r\n                   <Button type={'submit'} variant={'contained'}>Login</Button>\r\n               </FormGroup>\r\n           </FormControl>\r\n           </form>           \r\n       </Grid>\r\n   </Grid>\r\n}\r\n","import React, {useEffect}  from \"react\"\r\nimport \"./App.css\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\r\nimport {TodolistsList} from \"../features/todolists/TodolistsList\"\r\nimport {ErrorSnackBar} from \"../../src/components/errorSnackBar/ErrorSnackBur\"\r\nimport {AppRootStateType} from \"../app/Store\"\r\nimport {RequestStatusType} from \"../../src/app/appReducer\"\r\nimport {Route, BrowserRouter, Switch, Redirect} from \"react-router-dom\"\r\nimport {Login} from \"../features/login/Login\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {initializeAppTC} from \"../app/appReducer\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport {logoutTC} from \"../features/login/authReducer\"\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n function App({demo=false}: AppPropsType) {\r\n    const status  = useSelector<AppRootStateType, RequestStatusType >(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean >(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {       \r\n            dispatch(initializeAppTC())        \r\n    }, [])  \r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress style={{position:\"fixed\", top: \"50%\"}}/>\r\n        </div>\r\n     }\r\n     const logoutOnClick = ()=>{\r\n        dispatch(logoutTC())   \r\n     }\r\n     \r\n     return (\r\n         <BrowserRouter>\r\n             <div className=\"App\">\r\n                 <ErrorSnackBar />\r\n                 <AppBar position=\"static\" style={{ backgroundColor: \"rgb(185, 180, 180)\" }}>\r\n                     <Toolbar className={\"toolBur\"}>\r\n                         <div className={\"iconBlock\"}>\r\n                             <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                 <MenuIcon />\r\n                             </IconButton>\r\n                             <Typography variant=\"h6\" style={{marginTop:\"8px\"}}>\r\n                                 TODOLIST\r\n                             </Typography>\r\n                         </div>\r\n                         <Button color=\"inherit\" type={'submit'} variant={'contained'} onClick={logoutOnClick}>Logout</Button>\r\n                     </Toolbar>\r\n                     {status === \"loading\" && <LinearProgress />}\r\n                 </AppBar>\r\n\r\n                <Container fixed>\r\n                    <Switch>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={\"/login\"} render={() => <Login />} />\r\n                    <Route path={ \"/404\" } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    <Redirect from= {\"*\"} to= {\"/404\"}> </Redirect>\r\n                    </Switch>\r\n                </Container>\r\n\r\n        </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { appReducer } from './appReducer';\r\nimport { todolistsReducer } from \"../features/todolist/TodolistsReducer\"\r\nimport {tasksReducer} from \"../features/todolist/TasksReducer\"\r\nimport {combineReducers, createStore, applyMiddleware } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport { authReducer } from \"../features/login/authReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./app/App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\nimport {store} from \"./app/Store\"\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'))\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/3.70114d58.jpg\";"],"sourceRoot":""}