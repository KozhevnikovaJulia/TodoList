{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","addTaskTitle","trim","addTask","id","onClick","removeTodolist","className","value","onChange","e","currentTarget","onKeyPress","key","tasks","map","task","type","checked","isDone","changeStatus","removeTask","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","taskobjs","setTaskobjs","todolistID","newTasks","taskID","find","t","filtredTasks","TodolistID","todolist","tl","filtredTodolist","allTodolistTasks","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5f947f4c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport { FilterValusType } from \"./App\";\r\n\r\ntype TodoListPropsType = {\r\n    id:string\r\n    title:string\r\n    tasks:Array<TasksType>\r\n    removeTask:(taskId:string, todolistID:string)=>void\r\n    changeFilter:(value: FilterValusType, todolistID:string)=>void\r\n    addTask:(title:string, todolistID:string)=>void\r\n    changeStatus:(taskID:string, isDone:boolean, todolistID:string)=> void\r\n    filter:FilterValusType\r\n    removeTodolist: (todolistID:string)=> void\r\n}\r\nexport type TasksType = {\r\n    id: string,\r\n    title: string,\r\n    isDone:boolean\r\n}\r\n\r\nexport function TodoList(props:TodoListPropsType) {\r\n    let [title, setTitle] = useState(\" \")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTaskTitle = () => { if (title.trim() !== \"\"){ props.addTask(title, props.id); setTitle(\" \") }\r\n                                 else { setError(\"Title is required!\") }}\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { setError(null);\r\n                                                                       if (e.key === \"Enter\") {addTaskTitle()}};\r\n    const onClickAllFilter = () =>{props.changeFilter(\"all\", props.id) };\r\n    const onClickActiveFilter = () =>{props.changeFilter(\"active\", props.id) };\r\n    const onClickCompletedFilter = () =>{props.changeFilter(\"completed\", props.id) }\r\n    const removeTodolist = ()=>{props.removeTodolist(props.id)}\r\n    return (\r\n        <div >\r\n            <div>\r\n                <h3>{props.title}<button onClick={removeTodolist}>x</button></h3>\r\n                <div>\r\n                    <input className={error? \"error\": \"\"}\r\n                        value={title}\r\n                        onChange={onChangeHandler}\r\n                        onKeyPress={onKeyPressHandler}/>\r\n                    <button onClick={addTaskTitle}>+</button>\r\n                    {error && <div className=\"error-message\">{error}</div>}\r\n                </div>\r\n                <ul>\r\n                    {props.tasks.map(task => {\r\n                        const onClickHandler = () =>{props.removeTask(task.id, props.id) };\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>{props.changeStatus(task.id, e.currentTarget.checked, props.id)};\r\n                        return <li key={task.id}><input type=\"checkbox\"\r\n                                                        checked={task.isDone}\r\n                                                        onChange={onChangeHandler}/>\r\n                        <span>{task.title}</span><button onClick={onClickHandler}>x</button></li>})}\r\n                </ul>\r\n                <div>\r\n                    <button className={props.filter === \"all\"? \"active-filter\" : \"\"}onClick={onClickAllFilter}>All</button>\r\n                    <button className={props.filter === \"active\"? \"active-filter\" : \"\"}onClick={onClickActiveFilter}>Active</button>\r\n                    <button className={props.filter === \"completed\"? \"active-filter\" : \"\"}onClick={onClickCompletedFilter}>Completed</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {TasksType, TodoList} from \"./TodoList\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport type FilterValusType = \"all\" | \"completed\" | \"active\";\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter:FilterValusType\r\n}\r\ntype TaskobjType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n    let [todolists, setTodolists] = useState <TodolistType[]>([\r\n        {id: todolistId1, title:\"What to learn\", filter:\"all\"},\r\n        {id: todolistId2, title:\"What to buy\", filter:\"all\"}\r\n    ]  )\r\n    let [taskobjs, setTaskobjs] = useState<TaskobjType >({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"Learn JS\", isDone:true},\r\n            {id: v1(), title: \"Learn CSS\", isDone:true},\r\n            {id: v1(), title: \"Learn React\", isDone:false},\r\n            {id: v1(), title: \"Learn ReactAPI\", isDone:false},\r\n            {id: v1(), title: \"Learn GraphQL\", isDone:false}],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Buy bread\", isDone:true},\r\n            {id: v1(), title: \"Buy milk\", isDone:true}\r\n        ]}\r\n       )\r\n\r\n    function addTask(title:string, todolistID:string) {\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        let tasks = taskobjs[todolistID]\r\n        let newTasks = [task, ...tasks];\r\n        taskobjs[todolistID]= newTasks\r\n        setTaskobjs({...taskobjs})\r\n    }\r\n    function changeStatus (taskID:string, isDone:boolean, todolistID:string) {\r\n        let tasks = taskobjs[todolistID]\r\n        let task = tasks.find(t=>t.id === taskID)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTaskobjs({...taskobjs})\r\n        }\r\n         }\r\n\r\n    function removeTask(id: string, todolistID: string) {\r\n        let tasks = taskobjs[todolistID]\r\n        let filtredTasks = tasks.filter(task => task.id != id);\r\n        taskobjs[todolistID] = filtredTasks\r\n        setTaskobjs ({...taskobjs})\r\n    }\r\n\r\n    function changeFilter (value: FilterValusType, TodolistID:string) {\r\n        let todolist = todolists.find(tl=> tl.id === TodolistID)\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function removeTodolist (todolistID: string) {\r\n        let filtredTodolist = todolists.filter(tl=>tl.id != todolistID);\r\n        setTodolists(filtredTodolist);\r\n        delete taskobjs[todolistID];\r\n        setTaskobjs({...taskobjs})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map(tl =>  {\r\n                let allTodolistTasks= taskobjs[tl.id]\r\n                let tasksForTodoList = allTodolistTasks;\r\n\r\n                if (tl.filter === \"active\") {\r\n                    tasksForTodoList = allTodolistTasks.filter(task => !task.isDone )\r\n                }\r\n                if (tl.filter === \"completed\") {\r\n                    tasksForTodoList = allTodolistTasks.filter(task => {\r\n                        return task.isDone\r\n                    } )\r\n                }\r\n            return <TodoList title= {tl.title}\r\n                                            id={tl.id}\r\n                                            key={tl.id}\r\n                                           tasks={tasksForTodoList}\r\n                                           removeTask={removeTask}\r\n                                           changeFilter={changeFilter}\r\n                                           addTask={addTask}\r\n                                           changeStatus={changeStatus}\r\n                                           filter={tl.filter}\r\n                                           removeTodolist={removeTodolist}/>}) }\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}