{"version":3,"sources":["api/todolist-api.ts","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan.tsx","utils/errorUtils.ts","features/login/authReducer.ts","app/appReducer.ts","features/todolist/TodolistsReducer.tsx","features/todolist/TasksReducer.tsx","features/todolist/task/Task.tsx","features/todolist/TodoList.tsx","features/todolists/TodolistsList.tsx","components/errorSnackBar/ErrorSnackBur.tsx","features/login/Login.tsx","app/App.tsx","serviceWorker.ts","app/Store.ts","index.tsx","images/3.jpg"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","console","log","useState","title","setTitle","error","setError","addItemTitle","trim","TextField","variant","id","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","Button","size","onClick","style","height","EditableSpan","props","editMode","seteditMode","defaultValue","autoFocus","onBlur","onDoubleClick","instance","Axios","create","baseURL","withCredentials","headers","TodolistAPI","get","post","todolistId","delete","put","TaskAPI","taskId","model","AuthAPI","data","handleServerAppError","dispatch","messages","length","setErrorAC","setStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","bllModel","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","a","allTasksFromState","tasksForCurrentTodolist","find","apiModel","description","priority","startDate","deadline","response","resultCode","Task","onClickHandler","useCallback","removeTask","onChangeTaskTitleHandler","newTitle","changeTaskTitle","onChangeStatusHandler","newStatusValue","checked","changeStatus","Completed","New","Checkbox","defaultChecked","color","inputProps","IconButton","aria-label","TodoList","demo","useDispatch","useEffect","items","tasksForTodoList","addTask","onClickAllFilter","changeFilter","onClickActiveFilter","onClickCompletedFilter","changeTodolist","removeTodolist","TodolistsList","useSelector","auth","todolistID","thunk","item","addTaskTC","addTodolist","addTodolistTC","taskID","Grid","container","padding","spacing","Paper","elevation","backgroundImage","PaperBackground","backgroundSize","to","Alert","ErrorSnackBar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","alert","JSON","stringify","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","handleBlur","handleChange","touched","type","FormControlLabel","control","App","className","AppBar","position","backgroundColor","Toolbar","edge","Typography","marginTop","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.15d1ab33.chunk.js","sourcesContent":["import Axios from \"axios\"\r\n\r\n\r\nexport enum TaskStatuses {\r\nNew = 0,\r\nInProgress = 1,\r\nCompleted = 2,\r\nDraft = 3\r\n}\r\nexport enum TaskPriorities {\r\nLow = 0,\r\nMiddle = 1,\r\nHi = 2,\r\nUrgently = 3,\r\nLater = 4\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type TodolistType= {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n }\r\n export type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n } \r\n\r\n export type TaskType= {\r\ndescription: string\r\ntitle: string\r\nstatus: TaskStatuses\r\npriority: TaskPriorities\r\nstartDate: string\r\ndeadline: string\r\nid: string\r\ntodoListId: string\r\norder: number\r\naddedDate: string\r\n }\r\n type GetTaskResponce = {\r\n     error: string\r\n     totalCount: number\r\n     items:Array<TaskType>\r\n }\r\n\r\nconst instance = Axios.create ({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n     withCredentials: true,\r\n     headers: { \"API-KEY\": \"e9273c8b-70eb-4960-b897-692d970ce8cd\"}\r\n})\r\n\r\nexport const TodolistAPI = {\r\n    getTodolists  () {\r\n        return instance.get <Array<TodolistType>>(`todo-lists/`)\r\n    },\r\n    createTodolist (title: string) {\r\n        return instance.post <ResponseType<{item: TodolistType}> >(`todo-lists/` , {title})\r\n    },\r\n    deleteTodolist (todolistId: string) {\r\n        return instance.delete <ResponseType<{}>>(`todo-lists/`+ todolistId)\r\n    },\r\n    updateTodolist (todolistId: string, title: string) {\r\n        return instance.put <ResponseType< {}>>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n}\r\n\r\nexport const TaskAPI = {\r\n    getTasks  (todolistId: string) {\r\n        return instance.get <GetTaskResponce>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask (todolistId: string, title: string) {\r\n        return instance.post <ResponseType<{item: TaskType}> >(`todo-lists/${todolistId}/tasks` , {title})\r\n    },\r\n    deleteTask (todolistId: string, taskId: string) {\r\n        return instance.delete <ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\nexport const AuthAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>(`auth/login`, data)\r\n    },\r\n    logout () {\r\n        return instance.delete<ResponseType<{}>>(`auth/login`)\r\n    },  \r\n    me () {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`)\r\n    }  \r\n }\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\n export type AddItemPropsType = {    \r\n    addItem:(title:string)=>void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo( ({addItem, disabled = false}:AddItemPropsType) => {\r\n    console.log(\"AddItem\")\r\n    let [title, setTitle] = useState(\" \")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemTitle = () => { if (title.trim() !== \"\"){ addItem(title); setTitle(\" \") }\r\n                                 else { setError(true) }}\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {if(error!==false) {setError(false)};\r\n                                                                       if (e.key === \"Enter\") {addItemTitle()}};\r\n   \r\n    return (\r\n        <div>\r\n            <TextField error={error} variant=\"outlined\" id=\"outlined-error-helper-text\" \r\n             label={error ? \"Error\" : \"Input text\"} helperText={error ? \"Title is required!\" : \"\"}\r\n                value={title} onChange={onChangeHandler} onKeyPress={onKeyPressHandler} disabled={disabled}/>\r\n            <Button variant=\"contained\" size=\"small\" onClick={addItemTitle} style={{height:\"55px\"}} disabled={disabled}>ADD</Button>\r\n        </div>\r\n                \r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\n\r\n export type EditableSpanPropsType = {\r\n    value:string\r\n    onChange:(newTitle: string)=> void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo (({disabled= false, ...props}:EditableSpanPropsType) => {\r\n    let [editMode, seteditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activateEditMode = ()=>{seteditMode(true)\r\n                                  setTitle(props.value)}\r\n    const disactivateEditMode = ()=>{seteditMode(false)\r\n                                    props.onChange(title) }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    \r\n    return ( editMode ? <TextField  id=\"outlined-size-small\" defaultValue=\"Small\"  variant=\"outlined\" size=\"small\"\r\n                         onChange={onChangeHandler} autoFocus onBlur={disactivateEditMode} value={title} disabled={disabled}/>    \r\n                      : <span onDoubleClick={ activateEditMode }>{props.value}</span>                     \r\n    )\r\n})\r\n","import {ResponseType} from \"../api/todolist-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport {setStatusAC, setErrorAC} from \"../app/appReducer\"\r\n\r\n export const handleServerAppError = <D> (data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setErrorAC({error:\"Some error occurred\"}))\r\n    }\r\n    dispatch (setStatusAC({status:\"failed\"}))\r\n}                \r\n  \r\n\r\n export const handleServerNetworkError = (error: any, dispatch: Dispatch) => {\r\n    dispatch(setErrorAC(error.message ? error.message : \"Some error\"))\r\n    dispatch (setStatusAC({status:\"failed\"}))\r\n }","import { Dispatch } from \"redux\"\r\nimport { setStatusAC } from \"../../app/appReducer\"\r\nimport {AuthAPI, LoginParamsType} from \"../../api/todolist-api\"\r\nimport { handleServerAppError, handleServerNetworkError} from \"../../utils/errorUtils\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\nconst slice = createSlice ({\r\n   name: \"auth\",\r\n   initialState: initialState,\r\n   reducers: {\r\n      setIsLoggedInAC (state, action: PayloadAction<{value: boolean}>) {\r\n         state.isLoggedIn = action.payload.value\r\n      }\r\n   }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) =>\r\nasync (dispatch: Dispatch) => {\r\n   try {\r\n      dispatch(setStatusAC({status:\"loading\"}))\r\n      const response = await AuthAPI.login(data)\r\n         \r\n            if (response.data.resultCode === 0) {\r\n               dispatch(setIsLoggedInAC({value:true}))\r\n               dispatch(setStatusAC({status:\"succeeded\"}))\r\n            } else {\r\n               handleServerAppError(response.data, dispatch)\r\n            }\r\n   } catch (error){\r\n         handleServerNetworkError(error, dispatch)\r\n      }\r\n}\r\n\r\nexport const logoutTC = () =>\r\nasync (dispatch: Dispatch) => {\r\n   try {\r\n      dispatch(setStatusAC({status:\"loading\"}))\r\n      const response = await AuthAPI.logout()\r\n         \r\n              if (response.data.resultCode === 0) {\r\n                  dispatch(setIsLoggedInAC({value:false}))\r\n                  dispatch(setStatusAC({status:\"succeeded\"}))\r\n              } else {\r\n                  handleServerAppError(response.data, dispatch)\r\n              }\r\n   } catch(error){\r\n           handleServerNetworkError(error, dispatch)\r\n       }\r\n}\r\n","import {AuthAPI} from \"../api/todolist-api\"\r\nimport { Dispatch } from \"redux\"\r\nimport {setIsLoggedInAC} from \"../features/login/authReducer\"\r\nimport { handleServerNetworkError } from \"../utils/errorUtils\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\nconst initialState: InitialStateType = {\r\n   status: \"loading\",\r\n   error: null,\r\n   isInitialized: false\r\n}\r\nconst slice = createSlice ({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setStatusAC (state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setErrorAC (state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error \r\n        },\r\n        setInitializedAC (state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n })\r\nexport const appReducer = slice.reducer\r\nexport const {setInitializedAC, setErrorAC, setStatusAC} = slice.actions\r\n\r\nexport const initializeAppTC = () =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await AuthAPI.me()   \r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value:true}))\r\n        } else {\r\n        }\r\n        dispatch(setInitializedAC({isInitialized:true}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n   \r\n   \r\n}\r\n\r\n//types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n   // происходит ли сейчас взаимодействие с сервером\r\n   status: RequestStatusType\r\n   error: string | null\r\n   isInitialized: boolean\r\n}\r\n ","import {Dispatch} from \"redux\"\r\nimport { TodolistAPI, TodolistType } from \"../../api/todolist-api\"\r\nimport {TaskType} from \"../../api/todolist-api\"\r\nimport {setStatusAC, RequestStatusType} from \"../../app/appReducer\"\r\nimport { handleServerNetworkError} from \"../../utils/errorUtils\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\n\r\nlet initialState: Array<TodolistBLLType> = [] \r\n\r\nconst slice = createSlice ({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC (state, action: PayloadAction<{todolistId: string}>) {\r\n            const index = state.findIndex(tl=> tl.id===action.payload.todolistId)\r\n            if(index > -1){\r\n                state.splice(index,1)\r\n            }\r\n        },\r\n        addTodolistAC (state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({ ...action.payload.todolist, filter: \"all\" , entityStatus: \"idle\"})           \r\n        },\r\n        changeTodolistTitleAC (state, action: PayloadAction<{todolistId: string, title: string}>) {\r\n            const index = state.findIndex(tl=> tl.id===action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC (state, action: PayloadAction<{filter:FilterValuesType, todolistId: string}>) {\r\n            const index = state.findIndex(tl=> tl.id===action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC (state, action: PayloadAction<{entityStatus:RequestStatusType, todolistId: string}>) {\r\n            const index = state.findIndex(tl=> tl.id===action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        setTodolistsAC (state, action: PayloadAction<{todolists: Array<TodolistBLLType>}>) {\r\n           return action.payload.todolists.map(tl => ({ ...tl, filter: \"all\", entityStatus: \"idle\" }))  \r\n        }\r\n    }\r\n })\r\n\r\nexport let todolistsReducer = slice.reducer\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC,\r\n    changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC } = slice.actions\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () =>\r\n    async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC({status:\"loading\"}))\r\n            const response: any = await TodolistAPI.getTodolists()\r\n            dispatch(setTodolistsAC({todolists:response.data}))\r\n            dispatch(setStatusAC({status:\"succeeded\"}))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\nexport const removeTodolistTC = (todolistId: string) =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch (setStatusAC({status:\"loading\"}))\r\n        dispatch (changeTodolistEntityStatusAC({entityStatus:\"loading\", todolistId:todolistId}))\r\n        const response: any = await TodolistAPI.deleteTodolist(todolistId)            \r\n                    dispatch(removeTodolistAC({todolistId:todolistId}))\r\n                    dispatch (setStatusAC({status:\"succeeded\"}))  \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }             \r\n    }\r\nexport const addTodolistTC = (title: string) =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch (setStatusAC({status:\"loading\"}))\r\n        const response: any = await TodolistAPI.createTodolist(title)         \r\n                    dispatch(addTodolistAC ({todolist:response.data.data.item}))\r\n                    dispatch (setStatusAC({status:\"succeeded\"}))  \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }            \r\n    }\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        const response: any = await TodolistAPI.updateTodolist(todolistId, title)            \r\n        dispatch(changeTodolistTitleAC ({todolistId:todolistId, title:title}))    \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }           \r\n    }\r\n//types\r\nexport type TaskobjType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\r\nexport type TodolistBLLType = TodolistType & {\r\n    filter:FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { AppRootStateType } from \"../../app/Store\"\r\nimport { TaskType, TaskAPI, UpdateTaskModelType } from \"../../api/todolist-api\"\r\nimport {setStatusAC} from \"../../app/appReducer\"\r\nimport { handleServerAppError,  handleServerNetworkError} from \"../../utils/errorUtils\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { removeTodolistAC, addTodolistAC, setTodolistsAC } from \"../todolist/TodolistsReducer\"\r\n\r\nlet initialState: TaskobjType = {}\r\n\r\nconst slice = createSlice ({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, bllModel: UpdateBLLTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = { ...tasks[index], ...action.payload.bllModel }\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = [] \r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                                state[tl.id] = []\r\n                            })\r\n        });\r\n    }\r\n    // extraReducers: {\r\n    //     [removeTodolistAC.type](state, action: PayloadAction<{}>) { },\r\n    //     [addTodolistAC.type](state, action: PayloadAction<{}>) { },\r\n    //     [setTodolistsAC.type](state, action: PayloadAction<{}>) { }\r\n    // }\r\n})\r\n export const tasksReducer = slice.reducer\r\n export const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC } = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTS = (todolistId: string) =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch (setStatusAC({status:\"loading\"}))\r\n        const response = await TaskAPI.getTasks(todolistId)            \r\n                dispatch(setTasksAC({tasks:response.data.items, todolistId:todolistId}))\r\n                dispatch (setStatusAC({status:\"succeeded\"})) \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n                \r\n    }\r\nexport const removeTaskTC = (taskId: string, todolistId: string) =>\r\nasync (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await TaskAPI.deleteTask(todolistId, taskId)           \r\n        dispatch(removeTaskAC({taskId:taskId, todolistId:todolistId})) \r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }              \r\n    }\r\nexport const addTaskTC = (title: string, todolistId: string) =>\r\n    async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(setStatusAC({status:\"loading\"}))\r\n            const response = await TaskAPI.createTask(todolistId, title)\r\n\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC({task:response.data.data.item}))\r\n                dispatch(setStatusAC({status:\"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(response.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\nexport const updateTaskTC = (taskId: string, bllModel: UpdateBLLTaskModelType, todolistId: string) =>\r\nasync (dispatch: Dispatch , getState: () => AppRootStateType) => {\r\n        try {\r\n            const allTasksFromState = getState().tasks;\r\n            const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n            const task = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n            if (task) {\r\n                const apiModel: UpdateTaskModelType = {\r\n                    title: task.title,\r\n                    description: task.description,\r\n                    status: task.status,\r\n                    priority: task.priority,\r\n                    startDate: task.startDate,\r\n                    deadline: task.deadline,\r\n                    ...bllModel\r\n                }\r\n                const response = await TaskAPI.updateTask(todolistId, taskId, apiModel)\r\n\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId:taskId, bllModel:bllModel, todolistId:todolistId}))\r\n                } else {\r\n                    handleServerAppError(response.data, dispatch)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    }\r\n\r\n//types\r\nexport type UpdateBLLTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TaskobjType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\"\r\nimport { EditableSpan } from \"../../../components/editableSpan/EditableSpan\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport Checkbox from \"@material-ui/core/Checkbox\"\r\nimport {TaskType, TaskStatuses} from \"../../../api/todolist-api\"\r\n\r\nexport const Task = React.memo ((props:TaskPropsType) => { \r\n    const onClickHandler = useCallback (() => { props.removeTask(props.task.id, props.todolistId) }, [props.removeTask,props.task.id, props.todolistId ])\r\n    const onChangeTaskTitleHandler = useCallback ((newTitle: string) => { props.changeTaskTitle(props.task.id, newTitle, props.todolistId) }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n   \r\n    const onChangeStatusHandler = useCallback ((e: ChangeEvent<HTMLInputElement>) => { \r\n        let newStatusValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId) }, [props.changeStatus, props.todolistId, props.task.id ]);\r\n    return <div key={props.task.id}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onChangeStatusHandler}\r\n            defaultChecked\r\n            color=\"default\"\r\n            inputProps={{ 'aria-label': 'checkbox with default color' }} />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onChangeTaskTitleHandler} />\r\n        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n            <DeleteIcon />\r\n        </IconButton></div>\r\n})\r\n\r\n//types\r\nexport type TaskPropsType = {\r\n    removeTask:(taskId:string, todolistID:string)=>void\r\n    changeStatus:(taskID:string, status:TaskStatuses, todolistID:string)=> void\r\n    changeTaskTitle:(taskID:string, newTitle:string, todolistID:string)=> void\r\n    task: TaskType \r\n    todolistId: string\r\n}","import React, {useCallback, useEffect} from \"react\"\r\nimport { AddItemForm } from \"../../components/addItemForm/AddItemForm\"\r\nimport { EditableSpan } from \"../../components/editableSpan/EditableSpan\"\r\nimport { FilterValuesType, TodolistBLLType } from \"./TodolistsReducer\"\r\nimport { fetchTasksTS } from \"./TasksReducer\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport {Task} from \"./task/Task\"\r\nimport {TaskType, TaskStatuses} from \"../../api/todolist-api\"\r\nimport {useDispatch} from \"react-redux\"\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistBLLType\r\n    // id:string\r\n    // title:string\r\n    tasks:Array<TaskType>\r\n    removeTask:(taskId:string, todolistID:string)=>void\r\n    changeFilter:(value: FilterValuesType, todolistID:string)=>void\r\n    addTask:(title:string, todolistID:string)=>void\r\n    changeStatus:(taskID:string, status:TaskStatuses, todolistID:string)=> void\r\n    changeTaskTitle:(taskID:string, newTitle:string, todolistID:string)=> void\r\n    // filter:FilterValuesType\r\n    removeTodolist: (todolistID:string)=> void\r\n    changeTodolist: (todolistID:string, newTitle: string)=> void\r\n    demo?:boolean\r\n}\r\n\r\nexport const TodoList = React.memo (({demo= false,...props}:TodoListPropsType) => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo){\r\n            return\r\n        }\r\n        dispatch(fetchTasksTS(props.todolist.id))\r\n    }, [])  \r\n    \r\n    let tasksForTodoList = props.tasks\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\r\n    }\r\n    const addTask = useCallback ((title:string) => {props.addTask(title, props.todolist.id)}, [props.addTask, props.todolist.id])\r\n    const onClickAllFilter = useCallback (() =>{props.changeFilter(\"all\", props.todolist.id)}, [props.changeFilter, props.todolist.id]);\r\n    const onClickActiveFilter = useCallback (() =>{props.changeFilter(\"active\", props.todolist.id)}, [props.changeFilter, props.todolist.id]);\r\n    const onClickCompletedFilter = useCallback (() =>{props.changeFilter(\"completed\", props.todolist.id)}, [props.changeFilter, props.todolist.id])\r\n    const removeTodolist = ()=>{props.removeTodolist(props.todolist.id)}\r\n    const changeTodolist =useCallback ((newTitle: string) => {props.changeTodolist(props.todolist.id, newTitle)},[props.changeTodolist, props.todolist.id])\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.todolist.title} onChange={changeTodolist} disabled = {props.todolist.entityStatus=== \"loading\"}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodolist} disabled ={props.todolist.entityStatus===\"loading\"}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </h3>\r\n           \r\n            <AddItemForm addItem={addTask} disabled = {props.todolist.entityStatus=== \"loading\"}/>\r\n\r\n            <div>\r\n                {tasksForTodoList.map(task => <Task  removeTask = { props.removeTask}\r\n                                                changeStatus = {props.changeStatus}\r\n                                                changeTaskTitle = {props.changeTaskTitle}\r\n                                                task = {task}\r\n                                                todolistId = {props.todolist.id}\r\n                                                key = {task.id} />                  \r\n                )}\r\n            </div>\r\n            <div>\r\n                <Button  variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"} onClick={onClickAllFilter}>All</Button>\r\n                <Button variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"} onClick={onClickActiveFilter}>Active</Button>\r\n                <Button variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"} onClick={onClickCompletedFilter}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\"\r\nimport {TodoList} from \"../todolist/TodoList\"\r\nimport {AddItemForm} from \"../../components/addItemForm/AddItemForm\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport PaperBackground from \"../../images/3.jpg\"\r\nimport {changeTodolistTitleTC, addTodolistTC,removeTodolistTC, fetchTodolistsTC , TodolistBLLType, FilterValuesType, TaskobjType, changeTodolistFilterAC} from \"../../features/todolist/TodolistsReducer\"\r\nimport {updateTaskTC, addTaskTC, removeTaskTC} from \"../../features/todolist/TasksReducer\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {TaskStatuses} from \"../../api/todolist-api\"\r\nimport {AppRootStateType} from \"../../app/Store\"\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function TodolistsList({demo = false}: TodolistsListPropsType) {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistBLLType>>(state => state.todolists)\r\n    const tasks  = useSelector<AppRootStateType, TaskobjType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])  \r\n \r\n    const addTask = useCallback ((todolistID: string, title: string) => {\r\n        const thunk = addTaskTC(todolistID, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const addTodolist = useCallback ((title: string) => {\r\n        const thunk = addTodolistTC (title)\r\n        dispatch(thunk)    \r\n    }, [dispatch])\r\n    const changeStatus = useCallback ((taskID: string, status: TaskStatuses, todolistID: string) => {\r\n        const thunk = updateTaskTC (taskID, {status}, todolistID)\r\n        dispatch(thunk)         \r\n    }, [])\r\n    const changeTaskTitle = useCallback ((taskID: string, newTitle: string, todolistID: string) => {\r\n        const thunk = updateTaskTC (taskID, {title: newTitle}, todolistID)\r\n        dispatch(thunk) \r\n    }, [])\r\n    const removeTask = useCallback ((id: string, todolistID: string) =>{\r\n        const thunk = removeTaskTC (id, todolistID)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const changeFilter = useCallback ((value: FilterValuesType, todolistID:string) => {\r\n        let action = changeTodolistFilterAC ({filter:value, todolistId:todolistID})\r\n        dispatch(action)\r\n        }, [dispatch])    \r\n    const removeTodolist = useCallback((todolistID: string) => { \r\n        const thunk = removeTodolistTC (todolistID)\r\n        dispatch(thunk) \r\n    }, [])\r\n    const changeTodolist = useCallback ((todolistID: string, newTitle: string) => {        \r\n        const thunk = changeTodolistTitleTC (todolistID, newTitle)\r\n        dispatch(thunk)     \r\n    }, [])\r\n      \r\n  \r\n if (!isLoggedIn) {\r\n    return <Redirect  to = {\"/login\"}/>\r\n }\r\n\r\n    return  <> \r\n<Grid container style={{padding: \"25px\"}}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    let tasksForTodoList = allTodolistTasks;\r\n\r\n                    return <Grid item >\r\n                        <Paper elevation={3} style={{padding: \"15px\",\r\n                                                     backgroundImage: `url(${PaperBackground})`,                                                   \r\n                                                     backgroundSize: \"100% auto\"}}\r\n                                                     key={tl.id}>\r\n                            <TodoList \r\n                            todolist={tl}\r\n                            // title={tl.title}\r\n                            //     id={tl.id}\r\n                                key={tl.id}\r\n                                tasks={tasksForTodoList}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                // filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolist={changeTodolist}\r\n                                demo={demo} />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n         </>\r\n}\r\n","import React from \"react\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/Store\"\r\nimport {setErrorAC} from \"../../app/appReducer\"\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n\r\nexport function ErrorSnackBar() {\r\n    const error  = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n   \r\n//   const [open, setOpen] = React.useState(false);\r\nlet isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC({error:null}))\r\n    };\r\n\r\n  return (    \r\n      <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {error}\r\n        </Alert>\r\n      </Snackbar>\r\n    \r\n  );\r\n}","import React from \"react\"\r\nimport { Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid } from \"@material-ui/core\"\r\nimport { useFormik } from \"formik\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { loginTC } from \"./authReducer\"\r\nimport {AppRootStateType} from \"../../app/Store\"\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n }\r\n \r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n  \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values));\r\n            formik.resetForm()\r\n            const thunk = loginTC(values)\r\n            dispatch(thunk)\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect  to = {\"/\"}/>\r\n      }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                                target={'_blank'}>here\r\n                     </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: Kozhevnikova1501@yandex.ru</p>\r\n                        <p>Password: SocialNetworkTS</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name=\"email\"\r\n                            onBlur={formik.handleBlur}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? <div style={{color:\"red\"}}> {formik.errors.email} </div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name=\"password\"\r\n                            onBlur={formik.handleBlur}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ? <div style={{color:\"red\"}}> {formik.errors.password} </div> : null}\r\n                        <FormControlLabel\r\n                            name=\"rememeberMe\"\r\n                            checked={formik.values.rememberMe}\r\n                            onChange={formik.handleChange}\r\n                            label={'Remember me'}\r\n                            control={<Checkbox />}\r\n                        />\r\n                   <Button type={'submit'} variant={'contained'}>Login</Button>\r\n               </FormGroup>\r\n           </FormControl>\r\n           </form>           \r\n       </Grid>\r\n   </Grid>\r\n}\r\n","import React, {useEffect}  from \"react\"\r\nimport \"./App.css\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\"\r\nimport {TodolistsList} from \"../features/todolists/TodolistsList\"\r\nimport {ErrorSnackBar} from \"../../src/components/errorSnackBar/ErrorSnackBur\"\r\nimport {AppRootStateType} from \"../app/Store\"\r\nimport {RequestStatusType} from \"../../src/app/appReducer\"\r\nimport {Route, BrowserRouter, Switch, Redirect} from \"react-router-dom\"\r\nimport {Login} from \"../features/login/Login\"\r\nimport {useSelector, useDispatch} from \"react-redux\"\r\nimport {initializeAppTC} from \"../app/appReducer\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\r\nimport {logoutTC} from \"../features/login/authReducer\"\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n function App({demo=false}: AppPropsType) {\r\n    const status  = useSelector<AppRootStateType, RequestStatusType >(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean >(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {       \r\n            dispatch(initializeAppTC())        \r\n    }, [])  \r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress style={{position:\"fixed\", top: \"50%\"}}/>\r\n        </div>\r\n     }\r\n     const logoutOnClick = ()=>{\r\n        dispatch(logoutTC())   \r\n     }\r\n     \r\n     return (\r\n         <BrowserRouter>\r\n             <div className=\"App\">\r\n                 <ErrorSnackBar />\r\n                 <AppBar position=\"static\" style={{ backgroundColor: \"rgb(185, 180, 180)\" }}>\r\n                     <Toolbar className={\"toolBur\"}>\r\n                         <div className={\"iconBlock\"}>\r\n                             <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                 <MenuIcon />\r\n                             </IconButton>\r\n                             <Typography variant=\"h6\" style={{marginTop:\"8px\"}}>\r\n                                 TODOLIST\r\n                             </Typography>\r\n                         </div>\r\n                         <Button color=\"inherit\" type={'submit'} variant={'contained'} onClick={logoutOnClick}>Logout</Button>\r\n                     </Toolbar>\r\n                     {status === \"loading\" && <LinearProgress />}\r\n                 </AppBar>\r\n\r\n                <Container fixed>\r\n                    <Switch>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={\"/login\"} render={() => <Login />} />\r\n                    <Route path={ \"/404\" } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    <Redirect from= {\"*\"} to= {\"/\"}> </Redirect>\r\n                    </Switch>\r\n                </Container>\r\n\r\n        </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { appReducer } from './appReducer';\r\nimport { todolistsReducer } from \"../features/todolist/TodolistsReducer\"\r\nimport {tasksReducer} from \"../features/todolist/TasksReducer\"\r\nimport {combineReducers, createStore, applyMiddleware } from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport { authReducer } from \"../features/login/authReducer\"\r\nimport {configureStore} from \"@reduxjs/toolkit\"\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend( thunkMiddleware )   \r\n    })\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./app/App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\nimport {store} from \"./app/Store\"\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'))\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/3.70114d58.jpg\";"],"sourceRoot":""}