{"version":3,"sources":["images/3.jpg","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/TodolistsReducer.tsx","state/TasksReducer.tsx","AppWithRedux.tsx","serviceWorker.ts","store/Store.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","addItemTitle","trim","addItem","TextField","variant","id","label","helperText","value","onChange","e","currentTarget","onKeyPress","key","Button","size","onClick","style","height","EditableSpan","editMode","seteditMode","defaultValue","autoFocus","onBlur","onDoubleClick","TodoList","newTitle","changeTodolist","IconButton","aria-label","removeTodolist","addTask","tasks","map","task","Checkbox","checked","isDone","changeStatus","defaultChecked","color","inputProps","changeTaskTitle","removeTask","filter","changeFilter","initialState","App","todolists","useSelector","state","dispatch","useDispatch","todolistID","action","todolistId","type","addTaskAC","taskID","taskId","changeTaskStatusAC","changeTaskTitleAC","TodolistID","className","AppBar","position","backgroundColor","Toolbar","edge","Typography","Container","fixed","Grid","container","padding","v1","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodoList","item","Paper","elevation","backgroundImage","PaperBackground","backgroundSize","Boolean","window","location","hostname","match","rootReducer","combineReducers","stateCopy","filtredTasks","newTasks","find","t","filtredTodolists","newTodolistId","newTodolist","todolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8b8acad9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/3.70114d58.jpg\";","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n type AddItemPropsType = {\r\n    addItem:(title:string)=>void\r\n}\r\n\r\nexport function AddItemForm (props:AddItemPropsType) {\r\n    let [title, setTitle] = useState(\" \")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const addItemTitle = () => { if (title.trim() !== \"\"){ props.addItem(title); setTitle(\" \") }\r\n                                 else { setError(true) }}\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { setError(false);\r\n                                                                       if (e.key === \"Enter\") {addItemTitle()}};\r\n   \r\n    return (\r\n        <div>\r\n            <TextField error={error} variant=\"outlined\" id=\"outlined-error-helper-text\" \r\n             label={error ? \"Error\" : \"Input text\"} helperText={error ? \"Title is required!\" : \"\"}\r\n                value={title} onChange={onChangeHandler} onKeyPress={onKeyPressHandler} />\r\n            <Button variant=\"contained\" size=\"small\" onClick={addItemTitle} style={{height:\"55px\"}}>ADD</Button>\r\n        </div>\r\n                \r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n type EditableSpanPropsType = {\r\n    value:string\r\n    onChange:(newTitle: string)=> void\r\n}\r\n\r\nexport function EditableSpan (props:EditableSpanPropsType) {\r\n    let [editMode, seteditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activateEditMode = ()=>{seteditMode(true)\r\n                                  setTitle(props.value)}\r\n    const disactivateEditMode = ()=>{seteditMode(false)\r\n                                    props.onChange(title) }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value)};\r\n    \r\n    return ( editMode ? <TextField  id=\"outlined-size-small\" defaultValue=\"Small\"  variant=\"outlined\" size=\"small\"\r\n    onChange={onChangeHandler} autoFocus onBlur={disactivateEditMode} value={title}\r\n      />\r\n    \r\n    // <input onChange={onChangeHandler} autoFocus onBlur={disactivateEditMode} value={title}/>\r\n                      : <span onDoubleClick={ activateEditMode }>{props.value}</span> \r\n                    \r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport { AddItemForm } from \"./AddItemForm\";\r\nimport { EditableSpan } from \"./EditableSpan\";\r\nimport { FilterValuesType } from \"./App\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\ntype TodoListPropsType = {\r\n    id:string\r\n    title:string\r\n    tasks:Array<TasksType>\r\n    removeTask:(taskId:string, todolistID:string)=>void\r\n    changeFilter:(value: FilterValuesType, todolistID:string)=>void\r\n    addTask:(title:string, todolistID:string)=>void\r\n    changeStatus:(taskID:string, isDone:boolean, todolistID:string)=> void\r\n    changeTaskTitle:(taskID:string, newTitle:string, todolistID:string)=> void\r\n    filter:FilterValuesType\r\n    removeTodolist: (todolistID:string)=> void\r\n    changeTodolist: (todolistID:string, newTitle: string)=> void\r\n}\r\nexport type TasksType = {\r\n    id: string,\r\n    title: string,\r\n    isDone:boolean\r\n}\r\n\r\nexport function TodoList(props:TodoListPropsType) {\r\n    const addTask = (title:string) => {props.addTask(title, props.id)}\r\n    const onClickAllFilter = () =>{props.changeFilter(\"all\", props.id) };\r\n    const onClickActiveFilter = () =>{props.changeFilter(\"active\", props.id) };\r\n    const onClickCompletedFilter = () =>{props.changeFilter(\"completed\", props.id) }\r\n    const removeTodolist = ()=>{props.removeTodolist(props.id)}\r\n    const changeTodolist = (newTitle: string) => {props.changeTodolist(props.id, newTitle)}\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan value={props.title} onChange={changeTodolist}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodolist}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </h3>\r\n            \r\n            {/* <button onClick={removeTodolist}>x</button> */}\r\n\r\n            <AddItemForm addItem={addTask} />\r\n\r\n            <div>\r\n                {props.tasks.map(task => {\r\n                    const onClickHandler = () => { props.removeTask(task.id, props.id) };\r\n                    const onChangeTaskTitleHandler = (newTitle:string) => {props.changeTaskTitle(task.id, newTitle, props.id)}\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => { props.changeStatus(task.id, e.currentTarget.checked, props.id) };\r\n                    return <div key={task.id}>\r\n                        <Checkbox\r\n                            checked={task.isDone}\r\n                            onChange={onChangeStatusHandler}\r\n                            defaultChecked\r\n                            color=\"default\"\r\n                            inputProps={{ 'aria-label': 'checkbox with default color' }} />\r\n\r\n                        <EditableSpan value={task.title} onChange={onChangeTaskTitleHandler} />\r\n                        <IconButton aria-label=\"delete\" onClick={onClickHandler}>\r\n                            <DeleteIcon />\r\n                        </IconButton></div>\r\n                })}\r\n            </div>\r\n            <div>\r\n                <Button  variant={props.filter === \"all\" ? \"contained\" : \"outlined\"} onClick={onClickAllFilter}>All</Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"} onClick={onClickActiveFilter}>Active</Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"} onClick={onClickCompletedFilter}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { v1 } from \"uuid\";\r\n\r\ntype ActionType = RemoveTodolistActionType | AddTodolistActionType | ChangeTodolistTitleActionType | ChangeTodolistFilterActionType\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: \"ADD-TODOLIST\"\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    todolistId: string\r\n    filter: FilterValuesType\r\n}\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter:FilterValuesType\r\n}\r\nlet initialState: Array<TodolistType> = [] \r\n\r\nexport let todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\": {\r\n            let filtredTodolists = state.filter(tl => tl.id != action.todolistId)\r\n            return (filtredTodolists)\r\n        }   \r\n        case \"ADD-TODOLIST\": {\r\n            let newTodolistId = action.todolistId\r\n            let newTodolist: TodolistType = {id: newTodolistId, title: action.title, filter:\"all\"}\r\n            return [\r\n                ...state, newTodolist\r\n            ]\r\n        }   \r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            let todolist = state.find(tl => tl.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return [\r\n                ...state,\r\n            ]\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            let todolist = state.find(tl=> tl.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return [\r\n                ...state,\r\n            ]\r\n        }\r\n        default: return state;\r\n            // throw new Error(\"I do not andastand this action.type!\")\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: \"REMOVE-TODOLIST\", todolistId}\r\n }\r\n export const addTodolistAC = (title: string):  AddTodolistActionType => {\r\n    return { type: \"ADD-TODOLIST\", title, todolistId: v1()}\r\n }\r\n export const changeTodolistTitleAC = (todolistId: string, title: string):  ChangeTodolistTitleActionType => {\r\n    return { type: \"CHANGE-TODOLIST-TITLE\", todolistId, title}\r\n }\r\n export const changeTodolistFilterAC = (filter:FilterValuesType, todolistId: string ): ChangeTodolistFilterActionType => {\r\n    return { type: \"CHANGE-TODOLIST-FILTER\", filter, todolistId}\r\n }","import { v1 } from \"uuid\";\r\nimport {TasksType} from \"../TodoList\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType } from \"./TodolistsReducer\";\r\n\r\ntype ActionType = | RemoveTaskActionType\r\n                  | AddTaskActionType\r\n                  | ChangeTaskStatusActionType\r\n                  | ChangeTaskTitleActionType\r\n                  | AddTodolistActionType\r\n                  | RemoveTodolistActionType \r\n\r\ntype RemoveTaskActionType = {\r\n    type: \"REMOVE-TASK\"\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype AddTaskActionType = {\r\n    type: \"ADD-TASK\"\r\n    todolistId: string\r\n    title: string\r\n}\r\ntype ChangeTaskStatusActionType = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\ntype ChangeTaskTitleActionType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    todolistId: string\r\n    taskId: string\r\n    newTitle: string\r\n}\r\n\r\nexport type TaskobjType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nlet initialState: TaskobjType = {}\r\n\r\nexport let tasksReducer = (state: TaskobjType = initialState, action: ActionType): TaskobjType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            let stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            let filtredTasks = tasks.filter(task => task.id != action.taskId)\r\n            stateCopy[action.todolistId] = filtredTasks\r\n                return stateCopy\r\n           }\r\n        \r\n        case \"ADD-TASK\": {\r\n            let stateCopy = {...state}\r\n            let task = {id: v1(), title: action.title, isDone: false}\r\n            let tasks = stateCopy[action.todolistId]\r\n            let newTasks = [task, ...tasks]\r\n            stateCopy[action.todolistId]= newTasks\r\n            return stateCopy\r\n        }   \r\n\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let stateCopy = { ...state }\r\n            let tasks = stateCopy[action.todolistId]\r\n            let task = tasks.find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.isDone = action.isDone\r\n             }\r\n            return stateCopy\r\n        }   \r\n        \r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let stateCopy = { ...state }\r\n            let tasks = stateCopy[action.todolistId]\r\n            let task = tasks.find(t => t.id === action.taskId)\r\n            if (task) {\r\n                task.title = action.newTitle\r\n             }\r\n            return stateCopy\r\n        }        \r\n        case \"ADD-TODOLIST\": {\r\n            let stateCopy = { ...state }\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }   \r\n        case \"REMOVE-TODOLIST\": {\r\n            let stateCopy = { ...state }\r\n            delete stateCopy[action.todolistId] \r\n            return stateCopy\r\n        }   \r\n        default: return state;\r\n            // throw new Error(\"I do not andastand this action.type!\")\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType=> {\r\n    return { type: \"REMOVE-TASK\", taskId, todolistId}\r\n }\r\n export const addTaskAC = (title: string, todolistId: string): AddTaskActionType=> {\r\n    return { type: \"ADD-TASK\", title, todolistId}\r\n }\r\n export const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string ): ChangeTaskStatusActionType=> {\r\n    return { type: \"CHANGE-TASK-STATUS\",  taskId, isDone, todolistId,}\r\n }\r\n export const changeTaskTitleAC = (taskId: string, newTitle: string, todolistId: string): ChangeTaskTitleActionType=> {\r\n    return { type: \"CHANGE-TASK-TITLE\", taskId, newTitle, todolistId}\r\n }\r\n","import React, {useState, useReducer} from \"react\";\r\nimport './App.css';\r\nimport {TasksType, TodoList} from \"./TodoList\";\r\nimport { v1 } from \"uuid\";\r\nimport { AddItemForm } from \"./AddItemForm\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PaperBackground from \"./images/3.jpg\";\r\nimport {todolistsReducer, addTodolistAC, changeTodolistFilterAC, removeTodolistAC, changeTodolistTitleAC  } from \"./state/TodolistsReducer\"\r\nimport {tasksReducer, addTaskAC,  changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/TasksReducer\"\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport { AppRootStateType } from \"./store/Store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter:FilterValuesType\r\n}\r\ntype TaskobjType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nfunction App() {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks  = useSelector<AppRootStateType, TaskobjType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n \r\n    function addTask(title: string, todolistID: string) {\r\n        let action = addTaskAC(title, todolistID)\r\n        dispatch(action)\r\n    }\r\n    function addTodolist(title: string) {\r\n        let action = addTodolistAC(title)\r\n        dispatch(action)      \r\n    }\r\n    function changeStatus(taskID: string, isDone: boolean, todolistID: string) {\r\n        let action = changeTaskStatusAC(taskID, isDone, todolistID)\r\n        dispatch(action)\r\n    }\r\n    function changeTaskTitle(taskID: string, newTitle: string, todolistID: string) {\r\n        let action = changeTaskTitleAC (taskID, newTitle, todolistID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function removeTask(id: string, todolistID: string) {\r\n        let action = removeTaskAC (id, todolistID)\r\n        dispatch(action)\r\n    }\r\n\r\n    function changeFilter (value: FilterValuesType, TodolistID:string) {\r\n        let action = changeTodolistFilterAC (value, TodolistID)\r\n        dispatch(action)\r\n        }\r\n    \r\n    function removeTodolist (todolistID: string) {        \r\n        let action = removeTodolistAC  (todolistID)\r\n        dispatch(action)\r\n    }\r\n    function changeTodolist (todolistID: string, newTitle: string) {\r\n        let action = changeTodolistTitleAC (todolistID, newTitle)\r\n        dispatch(action)        \r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\" style={{backgroundColor:  \"rgb(185, 180, 180)\" }}>\r\n                     {/* \"rgb(150, 144, 144)\" */}\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n            <Grid container style={{padding: \"25px\"}}>\r\n                <AddItemForm addItem={addTodolist} />\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    let tasksForTodoList = allTodolistTasks;\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodoList = allTodolistTasks.filter(task => !task.isDone)\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodoList = allTodolistTasks.filter(task => {\r\n                            return task.isDone\r\n                        })\r\n                    }\r\n                    return <Grid item >\r\n                        <Paper elevation={3} style={{padding: \"15px\",\r\n                                                     backgroundImage: `url(${PaperBackground})`,\r\n                                                    //   \"url(https://images.pexels.com/photos/5725894/pexels-photo-5725894.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940)\",\r\n                                                     backgroundSize: \"100% auto\"}}\r\n                                                     key={tl.id}>\r\n                            <TodoList title={tl.title}\r\n                                id={tl.id}\r\n                                key={tl.id}\r\n                                tasks={tasksForTodoList}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeStatus={changeStatus}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolist={changeTodolist} />\r\n                        </Paper>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { todolistsReducer } from \"./../state/TodolistsReducer\";\r\nimport {tasksReducer} from \"./../state/TasksReducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer   \r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType <typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './AppWithRedux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./store/Store\";\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}